import "reflect-metadata";
import { ValidationError } from "fastest-validator";
import { ArrayOptions, BooleanOptions, DateOptions, EmailOptions, NumberOptions, Options, StringOptions, UuidOptions } from "./interfaces";
export declare const validate: (obj: any) => true | ValidationError[];
export declare const validateOrReject: (obj: any) => Promise<true | ValidationError[]>;
export declare function getSchema(target: any): any;
export declare function Schema(strict?: boolean, messages?: {}): any;
export declare const decoratorFactory: <T>(mandatory?: {}, defaults?: {}) => (options?: T | T[]) => any;
export declare const Field: (options?: unknown) => any;
export declare const String: (options?: StringOptions | StringOptions[]) => any;
export declare const Boolean: (options?: BooleanOptions | BooleanOptions[]) => any;
export declare const Number: (options?: NumberOptions | NumberOptions[]) => any;
export declare const UUID: (options?: UuidOptions | UuidOptions[]) => any;
export declare const ObjectId: (options?: Options | Options[]) => any;
export declare const Email: (options?: EmailOptions | EmailOptions[]) => any;
export declare const Date: (options?: DateOptions | DateOptions[]) => any;
export declare const Enum: (options?: Options | Options[]) => any;
export declare const Array: (options?: ArrayOptions | ArrayOptions[]) => any;
export declare function Nested(options?: Options): any;
export declare function NestedArray(type: any, options?: ArrayOptions): any;
export declare function transform(obj: any): void;
export declare function transformAndValidate(obj: any): true | ValidationError[];
