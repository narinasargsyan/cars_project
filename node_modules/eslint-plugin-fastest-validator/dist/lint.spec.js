"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const parser = __importStar(require("@typescript-eslint/parser"));
const lint_1 = require("./lint");
describe('Class validation decorators', () => {
    const linter = new experimental_utils_1.TSESLint.Linter();
    linter.defineRule('array-type', lint_1.rule);
    linter.defineParser('@typescript-eslint/parser', parser);
    it('validation decorators', () => {
        const code = `
class SomeClass2{
    some: number;
}
export class Device{
   pk: number;
   location: string;
   someBoolean?: boolean;
   someBoolProp: boolean;
   someOptionalBollProp?: boolean;
   nestedClass: SomeClass2;
   someNumber: number;
   someString: string;
   someArrayOfString: string[];
   someArrayOfObject: SomeClass2[];
   someArrayOfObjectOptional?: SomeClass2[];
   constructor(device: Device) {
  }
}

`;
        const output = `
@Schema()
class SomeClass2{
    @Number() some: number;
}

class BaseClass{
    @Number() someBaseProp: number;
}

@Schema()
export class Device extends BaseClass{
   @Number() pk: number;
   @String() location: string;
   @Boolean({optional: true}) someBoolean?: boolean;
   @Boolean() someBoolProp: boolean;
   @Boolean({optional: true}) someOptionalBollProp?: boolean;
   @Nested() nestedClass: SomeClass2;
   @Number() someNumber: number;
   @String() someString: string;
   @Array() someArrayOfString: string[];
   @NestedArray(SomeClass2) someArrayOfObject: SomeClass2[];
   @NestedArray(SomeClass2, {optional: true}) someArrayOfObjectOptional?: SomeClass2[];
   constructor(device: Device) {
  }
}
`;
        const result = linter.verifyAndFix(code, {
            rules: { 'array-type': [2] },
            parser: '@typescript-eslint/parser',
        }, { fix: true });
        expect(result.messages).toHaveLength(0);
        expect(result.output.trim()).toBe(output.trim());
    });
});
//# sourceMappingURL=lint.spec.js.map